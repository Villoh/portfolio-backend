plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version '0.9.4'
	id 'jacoco'
}

group = 'dev.villoh.portfolio.backend'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot starters
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Spring gRPC
	implementation 'io.grpc:grpc-services'
	implementation 'org.springframework.grpc:spring-grpc-server-web-spring-boot-starter'

	// OpenAPI / Swagger
	implementation libs.springdoc.ui

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Configuration processor
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// MapStruct
	implementation libs.mapstruct
	annotationProcessor libs.mapstruct.processor

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.grpc:spring-grpc-test'
	testImplementation libs.mockito
	testImplementation libs.cucumber.java
	testImplementation libs.cucumber.engine
	testImplementation libs.junit.jupiter
	testImplementation libs.spring.graphql.test
	testImplementation libs.archunit
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.grpc:spring-grpc-dependencies:${libs.versions.spring.grpc.get()}"
	}
}


protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {
				option 'jakarta_omit'
				option '@generated=omit'
			}
		}
	}
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	testLogging {
		exceptionFormat "full"
		events "started", "skipped", "passed", "failed"
		showStandardStreams true
	}
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
