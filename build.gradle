plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'dev.villoh.portfolio.backend'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springGrpcVersion', "0.8.0")
	set('mapstructVersion', "1.6.3")
	set('springdocVersion', "2.8.9")
	set('mockitoVersion', "5.18.0")
	set('cucumberVersion', "7.23.0")
	set('junitJupiterVersion', "5.10.0")
	set('graphqlTestVersion', "1.4.1")
	set('archUnitVersion', "1.2.1")
}

dependencies {
	// Spring Boot starters
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Spring gRPC
	implementation 'io.grpc:grpc-services'
	implementation 'org.springframework.grpc:spring-grpc-server-web-spring-boot-starter'

	// OpenAPI / Swagger
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Configuration processor
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// MapStruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.grpc:spring-grpc-test'
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
	testImplementation "org.springframework.graphql:spring-graphql-test:${graphqlTestVersion}"
	testImplementation "com.tngtech.archunit:archunit-junit5:${archUnitVersion}"
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {
				option 'jakarta_omit'
				option '@generated=omit'
			}
		}
	}
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	testLogging {
		exceptionFormat "full"
		events "started", "skipped", "passed", "failed"
		showStandardStreams true
	}
}


apply plugin: 'jacoco'

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
